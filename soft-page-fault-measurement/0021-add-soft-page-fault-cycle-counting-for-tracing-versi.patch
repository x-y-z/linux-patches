From 035e62b4c8c54fd5a2a9f3b42276b690223886a7 Mon Sep 17 00:00:00 2001
From: Zi Yan <zi.yan@cs.rutgers.edu>
Date: Tue, 4 Nov 2014 14:02:06 -0500
Subject: [PATCH 21/33] add soft page fault cycle counting for tracing version

---
 arch/x86/mm/fault.c | 35 +++++++++++++++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 273abe9..a42acbd 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -1417,6 +1417,11 @@ trace_page_fault_entries(unsigned long address, struct pt_regs *regs,
 dotraplinkage void notrace
 trace_do_page_fault(struct pt_regs *regs, unsigned long error_code)
 {
+	struct perf_event *do_page_fault_cycles;
+	unsigned long do_page_fault_start, do_page_fault_total = 0;
+	struct task_struct *tsk = current;
+    u64 enabled, running;
+    int is_soft_page_fault = 0;
 	/*
 	 * The exception_enter and tracepoint processing could
 	 * trigger another page faults (user space callchain
@@ -1425,12 +1430,38 @@ trace_do_page_fault(struct pt_regs *regs, unsigned long error_code)
 	 */
 	unsigned long address = read_cr2();
 	enum ctx_state prev_state;
-    int dummy_soft_page_fault = 0;
+
+	do_page_fault_cycles = perf_event_create_kernel_counter(&do_page_fault_attr, -1, tsk, NULL, NULL);
+
+	if (!IS_ERR(do_page_fault_cycles)) {
+	    perf_event_enable(do_page_fault_cycles);
+	    do_page_fault_start = perf_event_read_value(do_page_fault_cycles, &enabled, &running);
+    }
+    else {
+        printk("do_page_fault perf counter error: 1");
+    }
+
 
 	prev_state = exception_enter();
 	trace_page_fault_entries(address, regs, error_code);
-	__do_page_fault(regs, error_code, address, &dummy_soft_page_fault);
+	__do_page_fault(regs, error_code, address, &is_soft_page_fault);
 	exception_exit(prev_state);
+
+
+	if (!IS_ERR(do_page_fault_cycles)) {
+	    do_page_fault_total = perf_event_read_value(do_page_fault_cycles, &enabled, &running) -
+                    do_page_fault_start;
+	    perf_event_disable(do_page_fault_cycles);
+        perf_event_release_kernel(do_page_fault_cycles);
+        do_page_fault_cycles = NULL;
+
+        if (is_soft_page_fault) {
+            tsk->soft_page_fault_cycles += do_page_fault_total;
+        }
+	}
+    else {
+        printk("do_page_fault perf counter error: 1");
+    }
 }
 NOKPROBE_SYMBOL(trace_do_page_fault);
 #endif /* CONFIG_TRACING */
-- 
2.1.4

